#!/usr/bin/env bash
#
# Copyright (C) 2000-2005 Mike Markley
# Copyright (C) 2006-2023 Marc Haber
# Copyright (C) 2010-2021 Hannes von Haugwitz
# Copyright (C) 2024 Stan Rudenko
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# This is FreeBSD port of dailyaidecheck script that's originally from Debian


set -e # errexit: exit immediately if a command exits with a non-zero status
set -C # noclobber: disallow existing regular files to be overwritten by redirection of output

shopt -u checkwinsize

CALLER=""
if [ -n "$1" ]; then
    #shellcheck disable=SC2034
    CALLER="$1"
fi

# trap handler

FQDN="$(hostname -f 2>/dev/null || true)"
if [ -z "$FQDN" ]; then
    FQDN="$(hostname 2>/dev/null || true)"
fi
if [ -z "$FQDN" ]; then
    echo >&2 "error determining FQDN: neither hostname nor hostname --fqdn does give output"
    hostname >&2
    hostname -f >&2
    exit 1
fi

#shellcheck disable=SC2317
traphandler() {
    trap - INT ERR
    if [ -n "${LOCKED:-}" ]; then
        # we have the lock, 
        pgrep aide | xargs --no-run-if-empty kill -9
    fi
    if type -t onexit >/dev/null; then
        onexit signal "$1"
    else
        echo "${MAILHEAD:-}" | fold -b -w "${MAILWIDTH:-990}" | send_mail "${MAILTO}" "early termination - ${MAILSUBJ}"
    fi
    return 0
}
trap ' traphandler INT; trap - INT ERR' INT
trap ' traphandler ERR; trap - INT ERR' ERR


# Default variables
# Do NOT modify below, edit dailyaidecheck.conf instead
PATH="/usr/local/bin:/sbin:/usr/sbin:/bin:/usr/bin"
AIDEPATH="/usr/local/bin/aide"
# You can overwrite this from environment: LOGFILE=/home/log/aide.log dailyaidecheck
LOCKBASE="/var/run/aide"
LOCKFILE="$LOCKBASE/dailyaidecheck.lock"

TMPBASE="/tmp"
TMPDIRIN="$TMPBASE/dailyaidecheck"

AIDEARGS=""
MAILSUBJ="Daily AIDE report for $FQDN"
# You can overwrite this from environment: DAILYAIDECHECKCONF=/etc/blah.conf dailyaidecheck
DAILYAIDECHECKCONF="${DAILYAIDECHECKCONF:-/usr/local/etc/dailyaidecheck.conf}"

BEGINSTAMP="$(date +"%Y-%m-%d %H:%M:%S")"

# bail if no aide binary found
if ! [ -f "$AIDEPATH" ]; then
    printf "ERR: Can't find Aide. It must be installed to continue\n" >&2
    exit 1
fi

# have /usr/local/etc/dailyaidecheck.conf override variables
if [ -f "$DAILYAIDECHECKCONF" ]; then
    if [[ $(stat -f "%Lp" "$DAILYAIDECHECKCONF") == "600" ]]; then
        # shellcheck source=dailyaidecheck.conf
        source "$DAILYAIDECHECKCONF"
    else
        printf "ERR: config %s has wrong permissions. Please set chmod 600 %s\n" "$DAILYAIDECHECKCONF" "$DAILYAIDECHECKCONF"
        exit 1
    fi
fi

# from here on, we're going to bail on unbound variables

set -u

# umask

umask 027

MAILTO="${MAILTO:-root}"  # yeah, I have no idea what the heck is going on here
eval MAILTO="$MAILTO"     #    original script has these weird lines

send_mail() {
    local MAILTO
    local MAILSUBJ
    local MAILNAME
    local S_NAIL_MTA
    local RET
    MAILTO="$1"
    shift
    MAILSUBJ="$@"
    RET=""
    if [ -n "${MAILCMD:-}" ]; then
        eval "${MAILCMD} -s \"${MAILSUBJ}\" \"${MAILTO}\"" || RET=$?
    elif command -v s-nail >/dev/null; then
        S_NAIL_MTA="smtp://_aide@localhost"
        if [ "${CALLER}" == "--autopkgtest" ]; then
            S_NAIL_MTA="test:///tmp/dailyaidecheck"
        fi
        if echo "${MAILTO}" | grep -qv @; then
            # unqualified MAILTO, add /etc/mailname
            MAILNAME="$(cat /etc/mailname 2>/dev/null || true)"
            MAILTO="${MAILTO}@${MAILNAME:-localhost}"
        fi
        s-nail -Smta=${S_NAIL_MTA} -Ssmtp-auth=none -Sv15-compat -Sfrom="AIDE on ${FQDN} <root@${FQDN}>" -s "${MAILSUBJ}" "${MAILTO}" || RET=$?
    elif command -v mail >/dev/null; then
        if [ "${CALLER}" = "--crondaily" ] || [ "$(id -u)" -eq 0 ]; then
            # We are called from cron via capsh or have root and thus
            # mail(1) is useable, even if sendmail is set-uid-root.
            mail -s "${MAILSUBJ}" "${MAILTO}" || RET=$?
        else
            printf >&2 "WARN: it is not possible to use mail(1) unless aide is run as root or as non-root with added capabilities (either via systemd or via capsh). See /usr/share/doc/aide-common/README.Debian.gz for more information.\\n"
        fi
    else
        printf >&2 "WARN: mail or s-nail not installed, cannot send mail. See https://docs.freebsd.org/en/books/handbook/mail/ for more information.\\n"
    fi
    if [ -n "${RET}" ]; then
        printf >&2 "ERR: dailyaidejob was not able to send mail. The invoked mail command returned a non-zero exit code.\\n"
    fi
}

# Do NOT modify below, use environment variables instead
CONFIG="${CONFIG:-/usr/local/etc/aide.conf}"

# Test the configuration file first before we move forward
if ! $AIDEPATH --config="${CONFIG}" --config-check; then
    onexit configerror
    exit 1
fi

# grep aide configuration data from aide config

DATABASE="$(< "${CONFIG}" grep "^database_in[[:space:]]*=[[:space:]]*file:/" | head -n 1 | cut -d: -f2)"
DATABASE_OUT="$(< "${CONFIG}" grep "^database_out[[:space:]]*=[[:space:]]*file:/" | head -n 1 | cut -d: -f2)"

# Default values
# Do NOT modify below, edit dailyaidecheck.conf instead
CRON_DAILY_RUN="${CRON_DAILY_RUN:-yes}"
MAILWIDTH="${MAILWIDTH:-990}"
FIGLET="${FIGLET:-yes}"
DATABASE="${DATABASE:-/var/db/aide.db}"
LINES="${LINES:-1000}"
COMMAND="${COMMAND:-check}"
COPYNEWDB="${COPYNEWDB:-no}"
QUIETREPORTS="${QUIETREPORTS:-no}"
SILENTREPORTS="${SILENTREPORTS:-no}"
TRUNCATEDETAILS="${TRUNCATEDETAILS:-no}"
CRONEXITHOOK="${CRONEXITHOOK:-}"
ONEXIT=""
AIDEUSER="${AIDEUSER:-$(id -un)}"
AIDEUSERUID="$(id -u "${AIDEUSER}")"
CONFIGCHECKSUM="${CONFIGCHECKSUM:-}"
RETAINDB="${RETAINDB:-0}"

# insist that $LOCKBASE exists
if ! [ -d "$LOCKBASE" ] && ! mkdir -p "$LOCKBASE"; then
    printf "ERR: %s does not exist. It must exist and be only writable for %s\n" "${LOCKBASE}" "${AIDEUSER}"
    exit 1
fi

# silent implies quiet
if [ "$SILENTREPORTS" = "yes" ]; then
    QUIETREPORTS="yes"
fi

# Do NOT modify below, use environment variables instead to overwrite
LOGFILE="${LOGFILE:-/var/log/aide/aide.log}"
LOGDIR=$(dirname "$LOGFILE")
# Make sure log directory is created
# Must run before TMPDIR or MAILFILE are defined
if ! [ -d "$LOGDIR" ] && ! mkdir -p "$LOGDIR"; then
    onexit cantcreatelog
    exit 1
fi

# functions

mytempfile() {
    NAME="$1"
    echo "$TMPDIR/$NAME"
    touch "$TMPDIR/$NAME"
}

frame() {
    WIDTH=78
    STARS="*******************************************************************************"
    SPACES="                                                                               "
    printf "%s\\n" "${STARS:1:$WIDTH}"
    while read -r line ; do
        HALF="${SPACES:1:$(((WIDTH-${#line})/2))}"
        LINE="$HALF$line$SPACES"
        printf "*%s*\\n" "${LINE:1:$((WIDTH-2))}"
    done
    printf "%s\\n" "${STARS:1:$WIDTH}"
}

onexit() {
    if [ "$ONEXIT" = "running" ]; then
        return 1
    fi

    ONEXIT="running"

    local LOGHEAD
    local MAILHEAD
    local CRONJOBERR

    CRONEXITHOOKPARM="$1"
    case "$1" in
        signal)
            LOGHEAD="$(printf "terminated with signal %s" "$2")"
            MAILHEAD="$(printf "The daily aide check was terminated with signal %s" "$2")"
            CRONJOBERR="$2"
            ;;
        nodb)
            LOGHEAD="$(printf "database not present.")"
            MAILHEAD="$(printf "The daily aide check was terminated because no AIDE database is present")"
            CRONJOBERR="no DB"
            ;;
        fatal)
            LOGHEAD="$(printf "terminated by fatal error.")"
            MAILHEAD="$(printf "The daily aide check was terminated by a fatal error.")"
            CRONJOBERR="fatal"
            ;;
        nolock)
            LOGHEAD="$(printf "terminated because lock %s could not be obtained." "$LOCKFILE")"
            MAILHEAD="$(printf "The daily aide check was terminated because lock %s could not be obtained." "$LOCKFILE")"
            CRONJOBERR="no lock"
            ;;
        cantmovetmp)
            LOGHEAD="$(printf "terminated: Cannot move away %s." "$TMPDIRIN")"
            MAILHEAD="$(printf "The daily aide check was terminated: Cannot move away %s." "$TMPDIRIN")"
            CRONJOBERR="temp dir"
            ;;
        nohook)
            LOGHEAD="$(printf "terminated: CRONEXITHOOK set to %s which is not executeable." "$CRONEXITHOOK")"
            MAILHEAD="$(printf "The daily aide check was terminated: CRONEXITHOOK set to %s which is not executeable." "$CRONEXITHOOK")"
            CRONJOBERR="no hook"
            ;;
        cantcreatetmp)
            LOGHEAD="$(printf "terminated: Cannot create temporary directory %s." "$TMPDIRIN")"
            MAILHEAD="$(printf "The daily aide check was terminated: Cannot create temporary directory %s." "$TMPDIRIN")"
            CRONJOBERR="temp dir"
            ;;
        cantchmodtmp)
            LOGHEAD="$(printf "terminated: Cannot chmod temporary directory %s." "$TMPDIRIN")"
            MAILHEAD="$(printf "The daily aide check was terminated: Cannot chmod temporary directory %s." "$TMPDIRIN")"
            CRONJOBERR="temp dir"
            ;;
        tmpnotours)
            LOGHEAD="$(printf "terminated: Temporary directory %s has wrong owner/mode." "$TMPDIRIN")"
            MAILHEAD="$(printf "The daily aide check was terminated: Temporary directory %s has wrong owner/mode." "$TMPDIRIN")"
            CRONJOBERR="temp dir"
            ;;
        configerror)
            LOGHEAD="$(printf "terminated: Configuration error")"
            MAILHEAD="$(printf "The daily aide check was terminated: The configuration is broken. Run 'aide --config-check' to get more details.")"
            CRONJOBERR="conf error"
            ;;
        configbadhash)
            LOGHEAD="$(printf "terminated: Configuration hash mismatch")"
            MAILHEAD="$(printf "The configuration hash is wrong. It usually means that the configuration was updated without a hash change.")"
            CRONJOBERR="conf error"
            ;;
        cantcreatelog)
            LOGHEAD="$(printf "terminated: Cannot create log directory %s." "$FUCK")"
            MAILHEAD="$(printf "The daily aide check was terminated: Cannot create log directory %s." "$FUCK")"
            CRONJOBERR="log file"
            ;;
        success)
            ;;
        *)
            LOGHEAD="$(printf "wrong parameter (\"%s\") to onexit." "$1")"
            MAILHEAD="$(printf "The daily aide check was terminated for unknown reasons, and a wrong parameter (\"%s\")was given to onexit." "$1")"
            CRONJOBERR="unknown"
            CRONEXITHOOKPARM="unknown"
            ;;
    esac

    if [ -z "${TMPDIR:-}" ] || [ -z "${MAILFILE:-}" ]; then
        # we are being called so early that we are not yet fully initialized
        # LOGHEAD goes to syslog instead of LOGFILE since we do not know
        # what's up with LOGFILE
        logger -t "dailyaidecheck[$$]" -p user.emergency "$LOGHEAD"
        if [ "$SILENTREPORTS" != "yes" ]; then
            echo "$MAILHEAD" | fold -b -w "${MAILWIDTH:-990}" | send_mail "${MAILTO}" "premature termination - ${MAILSUBJ}"
        fi
        CRONEXITHOOKPARM="early-$CRONEXITHOOKPARM"
    else
        # we are being called after the daily aide check was properly set up.
        # Do the full works.

        rotate "$LOGFILE" "$RETAINDB" "false"

        printf >> "$MAILFILE" \
            "This is an automated report generated by the Advanced Intrusion Detection environment on %s started at %s.\\n\\n" "$FQDN" "$BEGINSTAMP"

        printf >> "$LOGFILE" \
            "aide run on %s started at %s.\\n" "$FQDN" "$BEGINSTAMP"

        if [ -n "${LOGHEAD:-}" ]; then
            printf "%s\\n" "$LOGHEAD" | frame >> "$LOGFILE"
            printf "\\n" >> "$LOGFILE"
        fi
        if [ -n "${MAILHEAD:-}" ]; then
            printf "%s\\n" "$MAILHEAD" | frame >> "$MAILFILE"
            printf "\\n\\n" >> "$MAILFILE"
        fi

        # report about AIDE's return value

        PRINTED=""
        FIGLETTEXT=""
        if [ -n "${ARETVAL:-}" ]; then
            ARETEXPL=""
            ARETERR=""
            PREFIX="$(printf "AIDE returned with exit code %d." "$ARETVAL")"
            case "$ARETVAL" in
                -1)
                    PREFIX=""
                    ARETERR="the daily aide check was interrupted before AIDE could return an exit code."
                    FIGLETTEXT="${CRONJOBERR:-interrupt}"
                    ;;
                0)
                    PREFIX="AIDE returned with a zero exit code."
                    ARETEXPL="No changes detected!"
                    FIGLETTEXT="unchanged"
                    ;;
                1)
                    ARETEXPL="Added entries detected!"
                    FIGLETTEXT="add"
                    ;;
                2)
                    ARETEXPL="Removed entries detected!"
                    FIGLETTEXT="rem"
                    ;;
                3)
                    ARETEXPL="Added and removed entries detected!"
                    FIGLETTEXT="add rem"
                    ;;
                4)
                    ARETEXPL="Changed entries detected!"
                    FIGLETTEXT="chg"
                    ;;
                5)
                    ARETEXPL="Added and changed entries detected!"
                    FIGLETTEXT="add chg"
                    ;;
                6)
                    ARETEXPL="Removed and changed entries detected!"
                    FIGLETTEXT="rem chg"
                    ;;
                7)
                    ARETEXPL="Added, removed and changed entries detected!"
                    FIGLETTEXT="add rem chg"
                    ;;
                14)
                    ARETERR="Error writing!"
                    FIGLETTEXT="$ARETERR"
                    ;;
                15)
                    ARETERR="Invalid Argument!"
                    FIGLETTEXT="EINVAL"
                    ;;
                16)
                    ARETERR="Unimplemented function!"
                    FIGLETTEXT="unimplemented"
                    ;;
                17|255)
                    ARETERR="Invalid configuration!"
                    FIGLETTEXT="invalid config"
                    ;;
                18)
                    ARETERR="Input/Output error!"
                    FIGLETTEXT="EIO"
                    ;;
                21)
                    ARETERR="cannot obtain lock"
                    FIGLETTEXT="no lock"
                    ;;
                250)
                    ARETERR="executable aide not found"
                    FIGLETTEXT="no executable"
                    ;;
                *)
                    ARETERR="$(printf "unknown non-zero exit value %d\\n\\n" "$ARETVAL")"
                    FIGLETTEXT="unknown error"
                    ;;
            esac
            if [ -n "$ARETEXPL" ]; then
                printf "%s %s\\n" "$PREFIX" "$ARETEXPL" >> "$MAILFILE"
                printf "%s %s\\n" "$PREFIX" "$ARETEXPL" >> "$LOGFILE"
                PRINTED=1
            fi
            if [ -n "$ARETERR" ]; then
                printf "%s %s\\n" "$PREFIX" "$ARETERR" | frame >> "$MAILFILE"
                printf "%s %s\\n" "$PREFIX" "$ARETERR" | frame >> "$LOGFILE"
                PRINTED=1
            fi
            unset ARETEXPL
            unset ARETERR
            unset PREFIX
        else
            ARETEXPL="ARETVAL not initialized. daily aide check was aborted prematurely."
            ARETVAL=255
            FIGLETTEXT="abort"
            printf "%s\\n" "$ARETEXPL" | frame >> "$MAILFILE"
            printf "%s\\n" "$ARETEXPL" | frame >> "$LOGFILE"
            PRINTED=1
            unset ARETEXPL
        fi
        if [ "${FIGLET}" = "yes" ]; then
            [ ! -x "$(command -v figlet)" ] && printf "ERR: Missing figlet. Disable it or run - pkg install figlet\\n"
            if [ -x "$(command -v figlet)" ] && [ -n "$FIGLETTEXT" ]; then
                printf "\\n%s\\n\\n" "$(figlet $FIGLETTEXT)" >> "$MAILFILE"
                PRINTED=1
            fi
        fi
        if [ -n "$PRINTED" ]; then
            printf "\\n" >> "$LOGFILE"
            printf "\\n\\n" >> "$MAILFILE"
        fi
        unset PRINTED

        # script errors

        if [ -n "${ERRORLOG:-}" ] && [ -s "$ERRORLOG" ]; then
            {
                printf "script errors\\n" | frame
                cat "$ERRORLOG"
                printf "End of script errors\\n\\n"
            } >> "$MAILFILE"

            {
                printf "script errors\\n" | frame
                cat "$ERRORLOG"
                printf "End of script errors\\n"
            } >> "$LOGFILE"
        fi

        # aide post run information

       if [ -n "${POSTRUNLOG:-}" ] && [ -s "$POSTRUNLOG" ]; then
           {
               printf "AIDE post run information\\n"
               cat "$POSTRUNLOG"
               printf "End of AIDE post run information\\n\\n"
           } >> "$MAILFILE"

           {
               printf "AIDE post run information\\n"
               cat "$POSTRUNLOG"
               printf "End of AIDE post run information\\n"
           } >> "$LOGFILE"
        fi

        # include error log in daily report e-mail

        if [ -n "${AERRLOG:-}" ] && [ -s "$AERRLOG" ]; then
            errorlines="$(wc -l "$AERRLOG" | awk '{ print $1 }')"
            {
                if [ "$LINES" -gt "0" ] && [ "${errorlines:=0}" -gt "$LINES" ]; then
                    printf "AIDE has returned many errors.\\nthe error log output has been truncated in this mail\\n" | \
                        frame
                    printf "Error output is %d lines, truncated to %d.\\n" "$errorlines" "$LINES"
                    head -n "$LINES" "$AERRLOG"
                    printf "\\nEnd of truncated AIDE error output. The full output can be found in %s.\\n\\n" "$LOGFILE"
                else
                    printf "Errors produced  (%d lines):\\n" "$errorlines"
                    cat "$AERRLOG"
                    printf "\\nEnd of AIDE error output.\\n\\n"
                fi
            } >> "$MAILFILE"
            {
                printf "AIDE error output (%d lines):\\n" "$errorlines"
                cat "$AERRLOG"
                printf "End of AIDE error output\\n"
            } >> "$LOGFILE"
        else
            printf >> "$MAILFILE" "AIDE produced no errors.\\n\\n"
            printf >> "$LOGFILE" "AIDE produced no errors.\\n"
        fi

        # finish log file
        {
            if [ -n "${ARUNLOG:-}" ] && [ -s "$ARUNLOG" ]; then
                printf "AIDE output (%d lines):\\n" "$(wc -l "$ARUNLOG" | awk '{ print $1 }')"
                cat "$ARUNLOG"
                printf "End of AIDE output.\\n\\n"
            else
                printf "AIDE detected no changes.\\n\\n"
            fi

            if [ -n "${DBCHECKLOG:-}" ] && [ -s "$DBCHECKLOG" ]; then
                cat "$DBCHECKLOG"
            fi

            ENDTIME="$(date +%s)"

            printf "End of AIDE daily aide check at %s, run time %d seconds\\n"  "$(date -r "$ENDTIME" +"%Y-%m-%d %H:%M")" "$(( ENDTIME - BEGINTIME ))"
        } >> "$LOGFILE"

        LOGFILE_CHECKSUM="$(sha256sum "$LOGFILE")"

        # include de-noised log into mail

        if [ -n "${ARUNLOG:-}" ] && [ -s "$ARUNLOG" ]; then

            MAIL_MODE=0

            # truncate details
            if [ "$TRUNCATEDETAILS" = "yes" ] ; then
                case "$ARETVAL" in
                    4|5|6|7)
                        MAILTMP="$(mytempfile aidemail)"
                        < "$ARUNLOG" sed '/^Detailed information about changes:$/,/^The attributes of the (uncompressed) database(s):$/{/^The attributes of the (uncompressed) database(s):$/!d}' >> "$MAILTMP"
                        MAIL_MODE=1
                        ;;
                    *)
                        MAILTMP="$ARUNLOG"
                        ;;
                esac

            else
                MAILTMP="$ARUNLOG"
            fi

            if [ -n "${NOISE:-}" ]; then
                NOISETMP="$(mytempfile aidenoise1)"
                NOISETMP2="$(mytempfile aidenoise2)"
                < "$MAILTMP" sed -n '1,/^Detailed information about changes:/p' | \
                grep '^\(changed\|removed\|added\|[fdLDBFs?!][ :l<>=bpugamcinCAXSE.+-]\{16\}\):' | \
                grep -v "^added: THERE WERE ALSO [0-9]\\+ FILES ADDED UNDER THIS DIRECTORY" >> "$NOISETMP2"

                {
                    if [ -n "$NOISE" ]; then
                        ##+# leaning toothpick syndrome, consider grep -E
                        < "$NOISETMP2" grep -v "^\\(changed\\|removed\\|added\\|[fdLDBFs?!][ :l<>=bpugamcinCAXSE.+-]\\{16\\}\\): $NOISE" >> "$NOISETMP" || true
                        printf "De-Noised output removes everything matching %s.\\n" "$NOISE"
                    fi

                    if [ -s "$NOISETMP" ]; then
                        loglines="$(< "$NOISETMP" wc -l | awk '{ print $1 }')"
                        if [ "$LINES" -gt "0" ] && [ "${loglines:=0}" -gt "$LINES" ]; then
                            printf "AIDE has returned long output which has been truncated in this mail\\n" | \
                                frame
                            printf "De-Noised output is %d lines, truncated to %d.\\n" "$loglines" "$LINES"
                            head -n "$LINES" "$NOISETMP"
                            printf "\\nEnd of truncated De-Noised AIDE output. The full output can be found in %s.\\nsha256sum: %s\\n\\n" "$LOGFILE" "$LOGFILE_CHECKSUM"
                        else
                            printf "De-Noised output of the daily AIDE check (%d lines):\\n" "$loglines"
                            cat "$NOISETMP"
                            printf "\\nEnd of De-Noised AIDE output.\\n\\n"
                        fi
                    else
                        printf "AIDE detected no changes after removing noise.\\n\\n"
                    fi
                    printf "============================================================================\\n"
                }
            fi

            # include non-de-noised log into mail

            {
                if [ -n "${MAILTMP:-}" ] && [ -s "$MAILTMP" ]; then
                    loglines="$(wc -l "$MAILTMP" | awk '{ print $1 }')"
                    if [ "$LINES" -gt "0" ] && [ "${loglines:=0}" -gt "$LINES" ]; then
                        printf "AIDE has returned long output which has been truncated in this mail\\n" | \
                            frame
                        printf "Output is %d lines, truncated to %d.\\n" "$loglines" "$LINES"
                        head -n "$LINES" "$MAILTMP"
                        printf "\\nEnd of truncated AIDE output. The full output can be found in %s.\\nsha256sum: %s\\n\\n" "$LOGFILE" "$LOGFILE_CHECKSUM"
                    else
                        printf "Output of the daily AIDE check (%d lines):\\n" "$loglines"
                        cat "$MAILTMP"
                        if [ "$MAIL_MODE" -gt "0" ] ; then
                            case "$MAIL_MODE" in
                                1) AIDE_OUTPUT="truncated" ;;
                                2) AIDE_OUTPUT="filtered" ;;
                                3) AIDE_OUTPUT="truncated and filtered" ;;
                            esac
                            printf "\\nEnd of %s AIDE output.\\n\\nThe full output can be found in %s.\\nsha256sum: %s\\n\\n" "$AIDE_OUTPUT" "$LOGFILE" "$LOGFILE_CHECKSUM"
                        else
                            printf "\\nEnd of AIDE output.\\n\\n"
                        fi
                    fi
                else
                    printf "AIDE detected no changes.\\n\\n"
                fi
            } >> "$MAILFILE"
        else
            printf >> "$MAILFILE" "funny, AIDE did not leave a log.\\n\\n"
            printf >> "$LOGFILE" "funny, AIDE did not leave a log.\\n"
        fi

        if [ -n "${DBCHECKLOG:-}" ] && [ -s "$DBCHECKLOG" ]; then
            < "$DBCHECKLOG" cat >> "$MAILFILE"
            printf >> "$MAILFILE" "\\n"
        fi

        printf >> "$MAILFILE" "End of AIDE daily aide check at %s, run time %d seconds\\n"  "$(date -r "$ENDTIME" +"%Y-%m-%d %H:%M")" "$(( ENDTIME - BEGINTIME ))"

        # send mail if changes or errors were detected or quiet reports not requested
        if [ "$QUIETREPORTS" != "yes" ] || [ "$ARETVAL" != "0" ] || [ "$(< "$ERRORLOG" wc -l)" -ne 0 ]; then
            # do not send anything (not even error messages) if silence is requested
            if [ "$SILENTREPORTS" != "yes" ]; then
                < "$MAILFILE" fold -b -w "${MAILWIDTH:-990}" | send_mail "${MAILTO}" "${MAILSUBJ}"
            fi
        fi

        # clean up tmpfiles
        rm -rf "$TMPDIRIN"
    fi

    if [ -n "$CRONEXITHOOK" ] && [ -x "$CRONEXITHOOK" ]; then
        $CRONEXITHOOK $CRONEXITHOOKPARM
    fi

    # clear lock
    [ -n "${LOCKED:-}" ] && lock remove
    unset LOCKED

    return 0
}

lock() {
    case "$1" in
        create)
            if [ -e "$LOCKFILE" ] && kill -0 "$(cat $LOCKFILE)" 2>/dev/null; then
                echo "Error: Lock file '$LOCKFILE' already exists. Process ID: $(cat "$LOCKFILE") is running"
                return 1
            fi
            # Write the current PID into the lock file atomically
            echo $$ >| "$LOCKFILE"
            return 0
            ;;
        remove)
            if [ ! -e "$LOCKFILE" ]; then
                echo "Error: Lock file '$LOCKFILE' does not exist."
                return 0
            fi
            # Check if the current script owns the lock by comparing PIDs
            local LOCK_PID
            LOCK_PID=$(cat "$LOCKFILE")
            if [[ "$LOCK_PID" == "$$" ]]; then
                rm -f "$LOCKFILE"
            else
                echo "Error: Lock file '$LOCKFILE' is owned by another process (PID: $LOCK_PID)."
                return 0
            fi
            ;;
    esac
}

rotate() {
    local BACKUPS
    local BACKUP_COUNT
    local FILES_TO_DELETE
    local TIMESTAMP
    local TARGETFILE
    local MAX_BACKUPS
    local NOCREATE
    TARGETFILE=$1
    MAX_BACKUPS="${2:-7}"
    NOCREATE="${3:-true}"
    if [ -f "$TARGETFILE" ]; then
        # Rotate the file: Move the original log file to the backup with a timestamp and compress it
        TIMESTAMP=$(date +"%Y-%m-%d_%H%M%S")
        mv "$TARGETFILE" "${TARGETFILE}.${TIMESTAMP}"
        gzip -9q "${TARGETFILE}.${TIMESTAMP}"
        # Delete old backup files if more than MAX_BACKUPS exist
        BACKUPS=$(ls -1t "${TARGETFILE}."*-*-*_*.gz 2>/dev/null)
        BACKUP_COUNT=$(echo "$BACKUPS" | wc -l)
        if [[ "$BACKUP_COUNT" -gt "$MAX_BACKUPS" ]]; then
          # Delete the oldest backups to maintain the limit
          FILES_TO_DELETE=$(echo "$BACKUPS" | tail -n +$((MAX_BACKUPS + 1)))
          echo "$FILES_TO_DELETE" | xargs rm -f
        fi
    fi
    # Immediately after rotation the new empty file is created
    [ "$NOCREATE" = "true" ] || touch "$TARGETFILE"
}

BEGINTIME="$(date +%s)"

if [ "$CRON_DAILY_RUN" != "yes" ] && ! tty -s; then
    exit 0
fi

# must be executed before prepare temp dir
if ! lock create; then
    onexit nolock
    exit 1
fi
LOCKED=yes

# Optionally check for config changes by checking its hash
if [ -n "$CONFIGCHECKSUM" ] && [ $CONFIGCHECKSUM != "$(sha256 -q "${CONFIG}")" ]; then
    onexit configbadhash
    exit 1
fi

# prepare temp dir
# We use invariant file names here since our work files need to be
# excluded from aide.
if [ -e "$TMPDIRIN" ]; then
    # $TMPDIRIN already exists (from an aborted run, maybe?). Move
    # it away. This does not cause the script to abort, but aide should
    # have rules to report the new directrory appearing in $TMPBASE.
    if ! NEWNAME="$(mktemp -d $TMPBASE/dailyaidecheck.old.XXXXXXXXXX)"; then
        onexit cantmovetmp
        exit 1
    fi
    mv "$TMPDIRIN" "$NEWNAME"
    unset NEWNAME
fi

if ! mkdir -p $TMPDIRIN; then
    onexit cantcreatetmp
    exit 1
fi

if [ "$(stat -f "%Lp %u" "${TMPDIRIN}")" != "750 ${AIDEUSERUID}" ]; then
    onexit tmpnotours
    exit 1
fi

if ! chmod 0700 "${TMPDIRIN}"; then
    onexit cantchmodtmp
    exit 1
fi

# handle the case that CRONEXITHOOK does not exist or is not executeable
if [ -n "$CRONEXITHOOK" ]; then
    if ! [ -x "$CRONEXITHOOK" ]; then
        onexit nohook
        exit 1
    fi
fi

# we can now directly use file names inside $TMPDIR: It is only
# writeable for us (umask 027), so we're safe against symlink attacks.
TMPDIR="$TMPDIRIN"

# now, with $TMPDIR having been created, we can use the full power of onexit.

# ERRORLOG: Error messages from script. Gets written to $LOGFILE first
ERRORLOG="$(mytempfile errorlog)"

if [ -n "${PREERRORLOG:-}" ]; then
    printf >> "$ERRORLOG" "%s" "$PREERRORLOG"
fi
unset PREERRORLOG

# MAILFILE: Contents gets mailed. Built and handled from inside onexit()
MAILFILE="$(mytempfile mailfile)"

# aide return value
ARETVAL=-1

if [ ! -f "$DATABASE" ]; then
    printf >> "$ERRORLOG" "Fatal error: The AIDE database '%s' does not exist!\\n" "$DATABASE"
    printf >> "$ERRORLOG" "This may mean you haven't created it or that the initialization process is still running, or it may mean that someone has removed it.\\n"
    onexit nodb
    exit 1
fi

# code

# re-assign current time to be more accurate about aide's real start time
BEGINSTAMP="$(date +"%Y-%m-%d %H:%M:%S")"

# ARUNLOG: standard output of aide run
ARUNLOG="$(mytempfile arunlog)"

# AERRLOG: standard error of aide run
AERRLOG="$(mytempfile aerrlog)"

printf "begin timestamp %s\\n" "$BEGINSTAMP" >> "$ARUNLOG"

# shellcheck disable=SC2086
$AIDEPATH --config="${CONFIG}" ${AIDEARGS} "--${COMMAND}" --after="report_url=file:${ARUNLOG}" 2>|"${AERRLOG}" && ARETVAL="$?"
ARETVAL="$?"

# POSTRUNLOG: summary of aide execution and daily aide check log
POSTRUNLOG="$(mytempfile postrunlog)"

# DBCHECKLOG: Output of the database checksums
DBCHECKLOG="$(mytempfile dbchecklog)"

# NOISETMP: completely de-noised log
# NOISETMP2: pre-filtered ARUNLOG, containing only changed, removed and added lines
NOISETMP="$(mytempfile noisetmp)"
NOISETMP2="$(mytempfile noisetmp2)"

# find out whether we neeed to copy the new database over the old one

COPYDB="0"
if [ "$COPYNEWDB" = "ifnochange" ] && [ "$ARETVAL" = "0" ]; then
    COPYDB="1"
    printf >> "$POSTRUNLOG" "no significant changes detected.\\n"
fi

if [ "$COPYNEWDB" = "yes" ]; then
    COPYDB=1
fi

if [ "$COPYDB" = "1" ] && [ "$COMMAND" = "update" ]; then
    cp -f "$DATABASE_OUT" "$DATABASE"
    [ "$RETAINDB" -gt 0 ] && rotate "$DATABASE_OUT" "$RETAINDB"
    printf >> "$POSTRUNLOG" "output database %s was copied to %s as requested by daily aide check configuration\\n" "$DATABASE_OUT" "$DATABASE"
fi

onexit success
exit 0

# vim: tabstop=4 shiftwidth=4 expandtab
# end of file
